[<<Abstract>>Entity]^[Hero]
[<<Abstract>>Entity]^[Monster]
[Hero]^[Battle]
[Monster]^[Battle]
[Item]^[Collected]
[Bow]^[<<Abstract>>Item]
[Staff]^[<<Abstract>>Item]
[Sword]^[<<Abstract>>Item]
[Bow]^[<<Interface>>ItemMenu]
[Staff]^[<<Interface>>ItemMenu]
[Sword]^[<<Interface>>ItemMenu]
[<<Abstract>>Item]^[<<Interface>>ItemMenu]

[Battle| initiative: int; heroFDamage: int; heroFGuard: int; heroLife: int; monsterFDamage: int; mosnterFGuard: int; monsterLife: int| Battle(); randInitiative(): int; randCriticalDam(): int; fight(): bool]

[<<Interface>>Collected| | takeItem(): void; discardItem(): void]

[<<Interface>>ItemMenu| | showItem(): void]

[<<Abstract>>Item| name: string; attribute: int; value: int; multStatus: int; taked: bool| Item(); ifNull(): bool; getNameAttribute(): string; takeItem(): void; discardItem(): void; getName(): string; getAttribute(): int; getValue(): int; getMultStatus(): int; getTaked(): bool; showItem(): void]

[<<Abstract>>Entity| name: string; life: int; intelligence: int; dexterity: int; damage: int; resistenve: int; finalDamage: int; finalGuard: int| Entity(); getLife(): int; setLife(): void; getStrenght(): int; setStrenght(): void; getIntelligence(): int; setIntelligence(): void; getDexterity(): int; setDexterity(): void; getResistence(): int; setResistence(): void; getFDamage(): int; setFDamage(): void; getFGuard(): int; setFGuard(): void; calcFDamage(): void; calcFGuard(): void]

[Hero| weapon: *Item; accessorie1: *Item; accessorie2: *Item; score: int| Hero(); equipW(): void; equipAcc(): void; unequipW(): void; unequipAcc(): void; calcFDamage(): void; calcFGuard(): void; setWeapon(): void; setAccessorie1(): void; setAccessorie2(): void]

[Monster| typeDamage: int| Monster(); calcFDamage(): void; calcFGuard(): void]

[Bow| | Bow(); showItem(): void]

[Staff| | Staff(); showItem(): void]

[Sword| | Sword(); showItem(): void]