[<<Abstract>>Entity]^[Hero]
[<<Abstract>>Entity]^[Monster]
[Weapon]^[<<Abstract>>Item]
[Acessories]^[<<Abstract>>Item]
[Weapon]^[<<Interface>>ItemMenu]
[Acessories]^[<<Interface>>ItemMenu]
[<<Interface>>BattleActions]^[Battle]
[Hero]^[Battle]
[Monster]^[Battle]
[Menu]^[Battle]
[Item]^[Collected]

// calcDamage return damage int; calcGuard return percent damaged 0 - 100
[<<Interface>>BattleActions| | calcDamage(): int; calcPercentGuard(): int]

[<<Abstract>>Entity| name: string; life: int; strength: int; intelligence: int; dexterity: int; damage: int; resistence: int; finalDamage: int; finalGuard: int| calcFDamage(): int; calcFGuard(): int]

[Hero| weapon: Item; acessorie1: Item; acessorie2: Item; score: int| showItem(): void; alterStatus(int type, int value): void; calcFDamage(): int; calcFGuard(): int; equip(): void; unequip(): void; swap(): void]

[Monster| typeDamage: int; points: int; asciiArt: string; multiplierStatus: double| drawAsciiArt(): void; calcFDamage(): int; calcFGuard(): int]

[Battle| initiative: int; hero: Hero; monster: Monster| calcDamage(): int; calcGuard(): int]

[<<Abstract>>Item| name: string; attribute: int; value: int; multStatus: int; taked: bool| ifNUll(): int; getNameAttribute(): string; takeItem(): void; discardItem(): void]

[<<Interface>>ItemMenu| | showItem(): void]

[Weapon| | showItem()]

[Acessories| | showItem()]


[<<Interface>>Collected| takeItem(): void; discardItem(): void] 

[Main| gameStart()]









